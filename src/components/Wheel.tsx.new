"use client"

import { useRef, useState, useEffect, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { type Prize } from "@/constants/prizes";
import { supabase } from '@/lib/supabase';

interface WheelProps {
  onSpinStart?: () => void;
  onError?: (message: string) => void;
  testMode?: boolean;
}

export default function Wheel({ onSpinStart, onError, testMode = false }: WheelProps) {
  const [availablePrizes, setAvailablePrizes] = useState<Prize[]>([]);
  const [spinning, setSpinning] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [assignedPrize, setAssignedPrize] = useState<Prize | null>(null);
  const [debugInfo, setDebugInfo] = useState<string>('');

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | null>(null);
  const startTimeRef = useRef<number | null>(null);
  const spinDurationRef = useRef<number>(5000); // 5 seconds
  const hasStartedSpinRef = useRef(false);
  
  interface WheelAngleRef {
    currentAngle: number;
    finalAngle?: number;
    targetPrize?: Prize | null;
  }
  
  const wheelAngleRef = useRef<WheelAngleRef>({ currentAngle: 0 });

  // Load available prizes
  useEffect(() => {
    const loadPrizes = async () => {
      try {
        const { data: prizes, error } = await supabase
          .from('prizes')
          .select('*')
          .gt('stock', 0)
          .order('id', { ascending: true });

        if (error) throw error;
        
        // Add wheel position to each prize
        const prizesWithPosition = prizes.map((prize, index) => ({
          ...prize,
          wheelPosition: (index * (2 * Math.PI)) / prizes.length
        }));
        
        setAvailablePrizes(prizesWithPosition);
      } catch (err) {
        console.error('Error loading prizes:', err);
        onError?.('Failed to load prizes. Please try again later.');
      }
    };

    loadPrizes();
  }, [onError]);

  // Draw the wheel
  const drawWheel = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !availablePrizes.length) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = Math.min(centerX, centerY) - 10;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw segments
    const segmentAngle = (2 * Math.PI) / availablePrizes.length;
    availablePrizes.forEach((prize, index) => {
      const startAngle = (index * segmentAngle) + (wheelAngleRef.current?.currentAngle || 0);
      const endAngle = startAngle + segmentAngle;
      
      // Draw segment
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.closePath();
      
      // Style segment
      ctx.fillStyle = prize.color || (index % 2 === 0 ? '#FF6B6B' : '#4ECDC4');
      ctx.fill();
      
      // Add stroke between segments
      ctx.strokeStyle = '#FFFFFF';
      ctx.lineWidth = 2;
      ctx.stroke();
      
      // Add text
      const textRadius = radius * 0.7;
      const textAngle = startAngle + (segmentAngle / 2);
      const textX = centerX + Math.cos(textAngle) * textRadius;
      const textY = centerY + Math.sin(textAngle) * textRadius;
      
      ctx.save();
      ctx.translate(textX, textY);
      ctx.rotate(textAngle + Math.PI/2);
      
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = '#FFFFFF';
      ctx.font = 'bold 14px Arial';
      
      // Split text into multiple lines if needed
      const maxWidth = radius * 0.8;
      const words = prize.name.split(' ');
      let line = '';
      let y = -10;
      
      for (const word of words) {
        const testLine = line ? `${line} ${word}` : word;
        const metrics = ctx.measureText(testLine);
        
        if (metrics.width > maxWidth && line) {
          ctx.fillText(line, 0, y);
          line = word;
          y += 20;
        } else {
          line = testLine;
        }
      }
      
      if (line) {
        ctx.fillText(line, 0, y);
      }
      
      ctx.restore();
    });

    // Draw center circle
    ctx.beginPath();
    ctx.arc(centerX, centerY, 10, 0, 2 * Math.PI);
    ctx.fillStyle = '#FFFFFF';
    ctx.fill();
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 2;
    ctx.stroke();
  }, [availablePrizes]);

  // Start spinning when assignedPrize is set
  useEffect(() => {
    if (!assignedPrize || hasStartedSpinRef.current) return;

    console.log('Starting wheel spin to prize:', assignedPrize);
    
    // Log debug info
    const segmentAngle = (2 * Math.PI) / availablePrizes.length;
    const prizeIndex = availablePrizes.findIndex(p => p.id === assignedPrize.id);
    const targetOffset = (prizeIndex * segmentAngle) + (segmentAngle / 2);
    
    const debugMsg = `Spinning to prize: ${assignedPrize.name}\n` +
                   `Prize Index: ${prizeIndex}\n` +
                   `Segment Angle: ${(segmentAngle * 180/Math.PI).toFixed(2)}°\n` +
                   `Target Offset: ${(targetOffset * 180/Math.PI).toFixed(2)}°`;
    
    setDebugInfo(debugMsg);
    console.log(debugMsg);
    
    hasStartedSpinRef.current = true;
    setSpinning(true);
    
    // Animation variables
    const fullRotations = 5;
    const startTime = performance.now();
    const startAngle = 0;
    const endAngle = (2 * Math.PI * fullRotations) + (2 * Math.PI) - targetOffset + (Math.PI / 2);
    
    console.log('Calculated endAngle:', endAngle, `(${(endAngle * 180/Math.PI).toFixed(2)}°)`);
    
    // Animation loop
    const animate = (timestamp: DOMHighResTimeStamp) => {
      if (!startTimeRef.current) {
        startTimeRef.current = timestamp;
        const frame = requestAnimationFrame(animate);
        animationRef.current = frame;
        return;
      }
      
      const elapsed = timestamp - startTimeRef.current;
      const progress = Math.min(elapsed / spinDurationRef.current, 1);
      
      // Easing function for smooth deceleration
      const easeOutCubic = 1 - Math.pow(1 - progress, 3);
      
      // Calculate current angle with easing
      const currentAngle = startAngle + (endAngle * easeOutCubic);
      
      // Update the wheel angle
      if (wheelAngleRef.current) {
        wheelAngleRef.current.currentAngle = currentAngle % (2 * Math.PI);
        wheelAngleRef.current.finalAngle = endAngle;
        wheelAngleRef.current.targetPrize = assignedPrize;
      }
      
      // Redraw the wheel
      drawWheel();
      
      // Continue animation if not complete
      if (progress < 1) {
        const frame = requestAnimationFrame(animate);
        animationRef.current = frame;
      } else {
        // Animation complete
        setSpinning(false);
        
        // Reset for next spin after a delay
        setTimeout(() => {
          if (wheelAngleRef.current) {
            wheelAngleRef.current.finalAngle = undefined;
            wheelAngleRef.current.targetPrize = undefined;
          }
          hasStartedSpinRef.current = false;
        }, 1000);
      }
    };
    
    // Start the animation
    const frame = requestAnimationFrame(animate);
    animationRef.current = frame;
    
    // Clean up on unmount or when assignedPrize changes
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
        animationRef.current = null;
      }
      startTimeRef.current = null;
    };
  }, [assignedPrize, availablePrizes, drawWheel]);

  // Handle spin button click
  const handleSpin = useCallback(async () => {
    if (spinning || loading || !availablePrizes.length) return;
    
    try {
      onSpinStart?.();
      setLoading(true);
      
      // Call your API to assign a prize
      const response = await fetch('/api/assign-and-spin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error('Failed to assign prize');
      }
      
      const data = await response.json();
      setAssignedPrize(data.prize);
    } catch (err) {
      console.error('Error spinning wheel:', err);
      onError?.('Failed to spin wheel. Please try again.');
    } finally {
      setLoading(false);
    }
  }, [spinning, loading, availablePrizes.length, onSpinStart, onError]);

  // Test spin function
  const handleTestSpin = () => {
    if (availablePrizes.length > 0) {
      const randomIndex = Math.floor(Math.random() * availablePrizes.length);
      setAssignedPrize(availablePrizes[randomIndex]);
    }
  };

  // Redraw wheel when needed
  useEffect(() => {
    if (availablePrizes.length > 0) {
      drawWheel();
    }
  }, [availablePrizes, drawWheel]);

  return (
    <div className="flex flex-col items-center w-full max-w-md mx-auto">
      <div className="relative w-full max-w-xs mx-auto">
        {/* HTML Pointer that stays fixed at the top */}
        <div className="absolute -top-6 left-1/2 transform -translate-x-1/2 z-10">
          <div className="w-0 h-0 border-l-[20px] border-r-[20px] border-b-[40px] border-l-transparent border-r-transparent border-b-yellow-400 drop-shadow-lg" />
          <div className="w-16 h-4 bg-yellow-400 mx-auto -mt-1 rounded-sm shadow-inner" />
        </div>
        
        <canvas 
          ref={canvasRef}
          width={300}
          height={300}
          className="w-full aspect-square rounded-full shadow-lg relative z-0"
        />
      </div>
      
      <Button
        onClick={handleSpin}
        disabled={spinning || loading}
        className={`mt-6 py-6 px-10 text-lg font-bold rounded-full bg-gradient-to-r from-blue-600 to-blue-800 
          hover:from-blue-700 hover:to-blue-900 text-white shadow-lg transform transition-all duration-200
          ${spinning || loading ? 'opacity-75 cursor-not-allowed' : 'hover:scale-105'}`}
      >
        {spinning || loading ? (
          <span className="flex items-center">
            <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Spinning...
          </span>
        ) : 'SPIN TO WIN'}
      </Button>
      
      {/* Debug Info */}
      <div className="mt-6 p-4 bg-gray-100 rounded-lg w-full max-w-xs">
        <h3 className="font-bold mb-2 text-gray-800">Debug Info:</h3>
        <pre className="text-xs whitespace-pre-wrap bg-white p-2 rounded">
          {debugInfo || 'No debug information available'}
        </pre>
        
        {wheelAngleRef.current?.currentAngle !== undefined && (
          <div className="mt-2 text-sm text-gray-700">
            Current Angle: {(wheelAngleRef.current.currentAngle * 180 / Math.PI).toFixed(2)}°
          </div>
        )}
        
        {testMode && (
          <button
            onClick={handleTestSpin}
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm font-medium"
            disabled={spinning}
          >
            Test Spin (Random Prize)
          </button>
        )}
      </div>
      
      {error && (
        <div className="mt-4 p-2 bg-red-100 text-red-700 rounded text-center">
          {error}
        </div>
      )}
    </div>
  );
}
